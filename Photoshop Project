package projects;

import java.awt.Color;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;

public class Photoshop extends Component {

	// the name of the output file. will be determined by which methods are called
    private String outputName;
    
    // the 2d array of colors representing the image
    private Color[][] pixels;
    
    // the width and height of the image 
    private int w,h;

    // this method increases each color's rgb value by a given amount.
    // don't forget that rgb values are limited to the range [0,255]
    public void brighten(int amount) {
        outputName = "brightened_" + outputName;
        
        for (int i = 0; i < pixels.length; i++) {
        	for (int j = 0; j< pixels[i].length; j++) {
        		
        		//Goes into picture, checks for RBGness of pixel 
        		// it then increases it by amount given by user input
        		int r = pixels[i][j].getRed() + amount; 
        		int g = pixels[i][j].getGreen() + amount;
        		int b = pixels[i][j].getBlue() + amount;
        		
        		//Range of RBG is from 0 to 255
        		//If r > 255, then g=255
        		//If r < 0, then g = 0
        		if (r > 255) r = 255;
        		else if (r < 0) r=0;
        		
        		//Range of RBG is from 0 to 255
        		//If g > 255, then g=255
        		//If g < 0, then g = 0
        		if (g > 255) g = 255;
        		else if (g < 0) g=0;
        		
        		//Range of RBG is from 0 to 255
        		//If b > 255, then b=255
        		//If b < 0, then b = 0
        		if (b > 255) b = 255;
        		else if (b < 0) b=0;
        		
        		//sets pixels to new color
        		pixels[i][j] = new Color (r, g, b);
        	
        	}
        	
        }
        
    }
    
    // flip an image either horizontally or vertically.
    public void flip(boolean horizontally) {
        outputName = (horizontally?"h":"v") + "_flipped_" + outputName;
        
        // hcount: stores # of flipped pixels so that rightmost pixel becomes the 1st in the 2D array
        // temp = temporary 2D array that stores the 2D pixels 
        
        Color[][] temp = new Color[pixels.length][w];
        int hcount = 0;
        
        if (horizontally) {
        	
        	for (int i = 0; i < pixels.length; i++) {
        		
        		hcount = 0;
        		
        		// j loops through row of 2D array BACKWARDS (starts from last value in array)
        		
        		for (int j = pixels[i].length-1; j >= 0; j--) {

        			temp[i][j] = pixels[i][hcount]; 
        			
        			hcount++;	
        			
        		}
        	
        	}
        	
        	// temp array is set equal to original 2D array
        	
        	pixels = temp;	
        	
        }
        
        else {
        	
        	// loops through rows image backwards
            // vert: temporary 2D array that stores the flipped 2D pixel array 
            // vcount: keeps track of # of rows & temp (counts forwards)
            
            Color[][] vert = new Color[h][w];
            int vcount = 0;
            
            for (int i = pixels.length - 1; i >= 0; i--) {
            	
            	vert[vcount] = pixels[i];
            	vcount++;
            	
            }
            
            //sets original 2D pixel array equal to temporary array
            
            pixels = vert;

        } 
        
    }
    
    // negates an image
    // to do this: subtract each pixel's rgb value from 255 
    // and use this as the new value
    public void negate() {
        outputName = "negated_" + outputName;
        
        //runs through pixels in entire picture and checks their RBGness
        
        for (int i = 0; i < pixels.length; i++) {
        	for (int j = 0; j<pixels[i].length; j++) {
        		
        		// if value of color is greater than 255, pixel gets set to 255 (max.)
        		int r = 255 - pixels[i][j].getRed(); 
        		int g = 255 - pixels[i][j].getGreen();
        		int b = 255 - pixels[i][j].getBlue();
        		
        		//checks if pixels exceeds max. value (255)
        		if (r > 255) r = 255;
        		if (g > 255) g = 255;
        		if (b > 255) b = 255;
        		
        		//sets values of 2D pixel array equal to new RGB values
        		pixels[i][j] = new Color (r, g, b);
        		
        	}
        	
        }
        
    }
    
    // this makes the image 'simpler' by redrawing it using only a few colors
    // to do this: for each pixel, find the color in the list that is closest to
    // the pixel's rgb value. 
    // use this predefined color as the rgb value for the changed image.
    public void simplify() {
    
    	// the list of colors to compare to. Feel free to change/add colors
    	Color[] colorList = {Color.BLUE, Color.RED, Color.YELLOW, 
    						Color.BLACK, Color.WHITE, Color.GREEN, Color.CYAN};
        
    	outputName = "simplified_" + outputName;
        
    	// runs through entire 2D array of pixels 
        
    	for (int i = 0; i < pixels.length; i++) {
        	
        	for (int j = 0; j < pixels[i].length; j++) {
        		
        		double diff;
        		Color minColor = null;
        		double min = Double.MAX_VALUE;
        		
        		// runs through array of colors you are comparing pixel to
        		
        		for (int k = 0; k < colorList.length; k++) {
        			
        			// distance between specific pixel and color in ColorList array
        			diff = distance(pixels[i][j], colorList[k]);
        			
        			if (diff < min) {
        				
        				// gives us minimum distance
        				// gives us closest color to given pixel
        				
        				min = diff;
        				minColor = colorList[k];
        				
        			}
        		}
        		
        		//sets current pixel in 2D array equal to closest color
        		pixels[i][j] = minColor; 
        		
        	}
        	
        }
         
    }
    
    // optional helper method (recommended)
    // uses 3d distance formula to calculate the "distance" between two colors
    
    public double distance(Color c1, Color c2) {
    	
    		return Math.sqrt(Math.pow(c1.getRed()-c2.getRed(), 2) + (c1.getGreen()-c2.getGreen())*(c1.getGreen()-c2.getGreen()) +((c1.getBlue()-c2.getBlue())*(c1.getBlue()-c2.getBlue())));
   
    }
    
    // this blurs the image
    // to do this: at each pixel, sum the 8 surrounding pixels' rgb values 
    // with the current pixel's own rgb value. 
    // divide this sum by 9, and set it as the rgb value for the blurred image
    
    public void blur() {
		outputName = "blurred_" + outputName;
		int r, g, b;
		
		//loops through entire 2D pixel array
		
		for (int i = 0; i+3 < pixels.length-1; i+=1){
		    
			for (int j = 0; j+3< pixels[i].length-1; j+=1){
		        
		    	r = 0; g = 0; b = 0;
		    	
		    	//draws a 3x3 square around each pixel
		    	for (int x = i; x < i+3; x++){
		            
		    		for (int y = j; y < j+3 ; y++){
		                
		    			//sums each of rgb values of 8 surrounding pixels
		    			r+= pixels[x][y].getRed();
		                g+= pixels[x][y].getGreen();
		                b+= pixels[x][y].getBlue();
		            }
		        }
		    	
		    	//sum is divided by 9
		    	r = r/9;
		    	g = g/9;
		    	b = b/9;
		    	
		    	// rgb values are set as values for blurred image
		    	
		    	pixels[i][j] = new Color(r, g, b);
		        
		    }
		}
		
	}
		// your code here
    
    // this highlights the edges in the image, turning everything else black. 
    // to do this: at each pixel, sum the 8 surrounding pixels' rgb values. 
    // now, multiply the current pixel's rgb value by 8, then subtract the sum.
    // this value is the rgb value for the 'edged' image
    
    public void edge() {
        outputName = "edged_" + outputName;
        Color[][] temp = new Color[pixels.length][pixels[0].length-1];
        int r, g, b;
        
        //nested for-loops that go through 2D pixel array
        
        for (int i = 1; i < pixels.length-1; i++) {
        	
        	for (int j = 1; j < pixels[i].length-1; j++) {
        		
        		r = 0; g = 0; b = 0;
		    	
		    	//draws a 3x3 square around each pixel
        		for (int x = i-1; x <= i+1; x++){
		            
		    		for (int y = j-1; y <= j+1 ; y++){
		                
		    			//sums each of rgb values of 8 surrounding pixels and current pixel
		    			r+= pixels[x][y].getRed();
		                g+= pixels[x][y].getGreen();
		                b+= pixels[x][y].getBlue();
		            }
		        }
        		
        		//subtracts current pixel from sum to get surrounding rgb values
        		r = (pixels[i][j].getRed()*8)-(r-pixels[i][j].getRed());
        		g = (pixels[i][j].getGreen()*8)-(g-pixels[i][j].getGreen());
        		b = (pixels[i][j].getBlue()*8)-(b-pixels[i][j].getBlue());
        		
        		//checks if RBG execeeds max. value or is below RBG min. value
        		if (r > 255) r = 255;
        		else if (r < 0) r=0;
        		
        		if (g > 255) g = 255;
        		else if (g < 0) g=0;
        		
        		if (b > 255) b = 255;
        		else if (b < 0) b=0;
        		
        		//stores color with pixel values of RBG in temp. array
        		temp[i][j]= new Color(r, g, b);
        		
        	}
       
        }
        
        //loops through the 2D pixel array and temp array and sets 2D pixels array equal to temp. array
        for (int i=1; i<pixels.length-1; i++) {
        	for (int j=1; j<pixels[i].length-1; j++) {
        		pixels[i][j]=temp[i][j];
        	}
        }
        
    }
 
    public void grayscale() {
    	
    	outputName = "grayscale_" + outputName;
    	
    	int avg;
    	
    	// nested loop that runs through 2D pixel array
    	
    	for (int i = 0; i<pixels.length; i++) {
    		
    		avg = 0;
    		
    		for (int j = 0; j < pixels[i].length; j++) {
    			
    			//sums each of rgb values of 8 surrounding pixels and current pixel
    			//numbers aren't magic! they are needed to convert pixels from RBG to B&W
    			//I got numbers from the website poynton.ca (linked in comment of assignment)
    			avg+= 0.2126*pixels[i][j].getRed();
                avg+= 0.7152*pixels[i][j].getGreen();
                avg+= 0.0722*pixels[i][j].getBlue();
    			
                //averages all rgb values of pixel
    			avg /= 3;
    			
    			//checks if avg exceeds RBG max. or is below RBG min. values
        		if (avg > 255) avg = 255;
        		else if (avg < 0) avg=0;
        		
        		//sets pixel equal to this avg (B&W color)
    			pixels[i][j]= new Color(avg, avg, avg);
    			
    		}
    		
    	}
    	
    }
    
    public void pink() {
    	
    	outputName = "pink_" + outputName;
    	
    	int avg;
    	
    	// nested loop that runs through 2D pixel array
    	
    	for (int i = 0; i<pixels.length; i++) {
    		
    		avg = 0;
    		
    		for (int j = 0; j < pixels[i].length; j++) {
    			
    			//sums each of rgb values of 8 surrounding pixels and current pixel
    			avg+= pixels[i][j].getRed();
                avg+= pixels[i][j].getGreen();
                avg+= pixels[i][j].getBlue();
    			
                //averages all rgb values of pixel
    			avg /= 3;
    			
    			//checks if avg exceeds RBG max. or is below RBG min. values
        		if (avg > 255) avg = 255;
        		else if (avg < 0) avg=0;
        		
        		//sets pixel's red equal to the avg values 
        		// also sets G & B to avg/2 and avg/1.5 to counter image's redness 
    			pixels[i][j]= new Color(avg, avg/2, (int)(avg/1.5));
    			
    		}
    	}
    	
    }
    
    public void orange() {
    	
    	outputName = "orange_" + outputName;
    	
    	int avg;
    	
    	// nested loop that runs through 2D pixel array
    	
    	for (int i = 0; i<pixels.length; i++) {
    		
    		avg = 0;
    		
    		for (int j = 0; j < pixels[i].length; j++) {
    			
    			//sums each of rgb values of 8 surrounding pixels and current pixel
    			avg+= pixels[i][j].getRed();
                avg+= pixels[i][j].getGreen();
                avg+= pixels[i][j].getBlue();
    			
                //averages all rgb values of pixel
    			avg /= 3;
    			
    			//checks if avg exceeds RBG max. or is below RBG min. values
        		if (avg > 255) avg = 255;
        		else if (avg < 0) avg=0;
        		
        		//sets pixel's red equal to the avg values & sets green and blue equal to 0
        		// 1.5 comes from 255/165, where 165 is green value for orange
    			pixels[i][j]= new Color(avg, (int)(avg/1.5), 0);
    			
    		}
    		
    	}

    }
    	
    
    // *************** DON'T MESS WITH THE BELOW CODE **************** //
    
    // feel free to check it out, but don't change it unless you've consulted 
    // with Mr. David and understand what the code's doing
    
    public void run() {
    	JFileChooser fc = new JFileChooser();
		File workingDirectory = new File(System.getProperty("user.dir")+System.getProperty("file.separator")+ "Images");
		fc.setCurrentDirectory(workingDirectory);
		fc.showOpenDialog(null);
		File my_file = fc.getSelectedFile();
		if (my_file == null)
			System.exit(-1);
		
		// reads the image file and creates our 2d array
        BufferedImage image;
		try {
			image = ImageIO.read(my_file);
		
	        BufferedImage new_image = new BufferedImage(image.getWidth(),
	                        image.getHeight(), BufferedImage.TYPE_INT_ARGB);
	        create_pixel_array(image);
			outputName = my_file.getName();
			
			// runs the manipulations determined by the user
			System.out.println("Enter the manipulations you would like to run on the image.\nYour "
					+ "choices are: brighten, flip, negate, blur, simplify, grayscale, pink, or orange.\nEnter each "
					+ "manipulation you'd like to run, then type in 'done'.");
			Scanner in = new Scanner(System.in);
			String action = in.next().toLowerCase();
			while (!action.equals("done")) {
	    			try {
		    			if (action.equals("brighten")) {
		    				System.out.println("enter an amount to increase the brightness by");
		    				int brightness = in.nextInt();
		        			Method m = getClass().getDeclaredMethod(action, int.class);
		        			m.invoke(this, brightness);
		    			}
		    			else if (action.equals("flip")) {
		    				System.out.println("enter \"h\" to flip horizontally, anything else to flip vertically.");
		        			Method m = getClass().getDeclaredMethod(action, boolean.class);
		        			m.invoke(this, in.next().equals("h"));
		    			}
		    			else {
		        			Method m = getClass().getDeclaredMethod(action);
		        			m.invoke(this, new Object[0]);
		    			}
		    			System.out.println("done. enter another action, or type 'done'");
	    			}
	    			catch (NoSuchMethodException e) {
	    				System.out.println("not a valid action, try again");
	    			} catch (IllegalAccessException e) {e.printStackTrace();System.exit(1);} 
	    			catch (IllegalArgumentException e) {e.printStackTrace();System.exit(1);}
	    			catch (InvocationTargetException e) {e.printStackTrace();System.exit(1);}
	    			
	    			action = in.next().toLowerCase();
	    		} 
	        in.close();
	        
	        // turns our 2d array of colors into a new png file
	        create_new_image(new_image);
	        File output_file = new File("Images/" + outputName);
	        ImageIO.write(new_image, "png", output_file);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
    }
		
    
    public void create_pixel_array(BufferedImage image) {
        w = image.getWidth();
        h = image.getHeight();
        pixels = new Color[h][];
        for (int i = 0; i < h; i++) {
            pixels[i] = new Color[w];
            for (int j = 0; j < w; j++) {
                pixels[i][j] = new Color(image.getRGB(j,i));
            }
        }
    }

    public void create_new_image(BufferedImage new_image) {
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
            		new_image.setRGB(j, i, pixels[i][j].getRGB());
            }
        }
    }

    public static void main(String[] args) {
		new Photoshop();
	}

    public Photoshop() {
		run();
    }
}
